from flask import Blueprint, request, jsonify, session
import json
import google.generativeai as genai
from db import get_connection

chat_bp = Blueprint('chat', __name__)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Gemini
genai.configure(api_key="AIzaSyDYTlA9IPnGIgxQ5cUE6QtdI5R9ceE1iMs")  # –≤–∞—à –∫–ª—é—á
model = genai.GenerativeModel("gemini-1.5-flash")

from decimal import Decimal

def convert_decimal(obj):
    if isinstance(obj, Decimal):
        return float(obj)  # –∞–±–æ str(obj), —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ —Å—Ç—Ä–æ–∫–∞
    raise TypeError

def get_products_context():
    conn = get_connection()
    cursor = conn.cursor(dictionary=True)
    
    cursor.execute("""
        SELECT id, title, brand, os, price, ram, rom, main_camera, 
               battery_capacity, screen_size, color
        FROM products 
        ORDER BY RAND() 
        LIMIT 700
    """)
    products = cursor.fetchall()

    # üîë –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ Decimals —É float
    for p in products:
        for key, value in p.items():
            if isinstance(value, Decimal):
                p[key] = float(value)

    cursor.execute("SELECT DISTINCT brand FROM products WHERE brand IS NOT NULL LIMIT 10")
    brands = [row['brand'] for row in cursor.fetchall()]
    
    cursor.execute("SELECT DISTINCT os FROM products WHERE os IS NOT NULL")
    os_list = [row['os'] for row in cursor.fetchall()]
    
    conn.close()
    
    return {
        'products': products[:20],
        'brands': brands,
        'os_list': os_list,
        'base_url': request.host_url
    }

def get_user_context():
    """–û—Ç—Ä–∏–º—É—î –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if 'user_id' not in session:
        return None
    
    conn = get_connection()
    cursor = conn.cursor(dictionary=True)
    
    cursor.execute("SELECT wishlist, cart, view_history FROM users WHERE id = %s", 
                  (session['user_id'],))
    user_data = cursor.fetchone()
    conn.close()
    
    if not user_data:
        return None
    
    context = {'user_id': session['user_id']}
    
    try:
        wishlist = json.loads(user_data.get('wishlist') or '[]')
        cart = json.loads(user_data.get('cart') or '{}')
        views = json.loads(user_data.get('view_history') or '[]')
        
        context.update({
            'wishlist_count': len(wishlist),
            'cart_count': len(cart),
            'recent_views': len(views)
        })
    except:
        pass
    
    return context

@chat_bp.route('/api/chat', methods=['POST'])
def chat():
    data = request.get_json()
    user_message = data.get('message', '').strip()
    
    if not user_message:
        return jsonify({'error': '–ü–æ—Ä–æ–∂–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'}), 400
    
    try:
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç
        products_context = get_products_context()
        user_context = get_user_context()
        
        # –ü—Ä–æ–º–ø—Ç
        system_prompt = f"""
–¢–∏ AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—É —Å–º–∞—Ä—Ç—Ñ–æ–Ω—ñ–≤ SmartShop. 

–î–û–°–¢–£–ü–ù–Ü –¢–û–í–ê–†–ò (–ø—Ä–∏–∫–ª–∞–¥–∏):
{json.dumps(products_context['products'], ensure_ascii=False, indent=2)}


–î–û–°–¢–£–ü–ù–Ü –ë–†–ï–ù–î–ò: {', '.join(products_context['brands'])}
–î–û–°–¢–£–ü–ù–Ü –û–°: {', '.join(products_context['os_list'])}

–ö–û–ù–¢–ï–ö–°–¢ –ö–û–†–ò–°–¢–£–í–ê–ß–ê: {user_context if user_context else '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π'}

–ü–†–ê–í–ò–õ–ê:
1. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ —ñ –ø–æ —Å—É—Ç—ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é
2. –î–æ–ø–æ–º–∞–≥–∞–π –∑ –≤–∏–±–æ—Ä–æ–º –∑–∞ –±—é–¥–∂–µ—Ç–æ–º —ñ –ø–æ—Ç—Ä–µ–±–∞–º–∏ 
3. –ó–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—é—é—á—ñ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –∫—Ä–∞—â–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –ü
4. –æ—Ä—ñ–≤–Ω—é–π —Ç–æ–≤–∞—Ä–∏ –∑–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ 
5. –ó–∞–≤–∂–¥–∏ –Ω–∞–¥–∞–≤–∞–π –ø–æ—Å–∏–ª–∞–Ω–Ω—è: {products_context['base_url']}product/[ID]
6. –†–µ–∫–æ–º–µ–Ω–¥—É–π —Ç–æ–≤–∞—Ä–∏ –∑ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
7. –ú–∞–∫—Å–∏–º—É–º 400 —Å–∏–º–≤–æ–ª—ñ–≤ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
"""
        
        # –ó–∞–ø–∏—Ç –¥–æ Gemini API
        response = model.generate_content([
            system_prompt,
            user_message
        ])
        
        ai_message = response.text.strip()
        
        return jsonify({'message': ai_message})
    
    except Exception as e:
        return jsonify({'error': f'–ü–æ–º–∏–ª–∫–∞: {str(e)}'}), 500

@chat_bp.route('/api/search-products', methods=['POST'])
def search_products():
    """–ü–æ—à—É–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è —á–∞—Ç-–±–æ—Ç–∞"""
    data = request.get_json()
    query = data.get('query', '').strip()
    
    if not query:
        return jsonify({'products': []})
    
    conn = get_connection()
    cursor = conn.cursor(dictionary=True)
    
    cursor.execute("""
    SELECT id, title, brand, os, price, ram, rom, main_camera, 
           battery_capacity, screen_size, color
    FROM products
    """)

    products = cursor.fetchall()
    conn.close()
    
    return jsonify({'products': products})

