class ChatWidget {
    constructor() {
        this.isOpen = false;
        this.isTyping = false;
        this.init();
    }

    init() {
        this.createWidget();
        this.attachEventListeners();
        this.addWelcomeMessage();
    }

    createWidget() {
        const widget = document.createElement('div');
        widget.className = 'chat-widget';
        widget.innerHTML = `
            <div class="chat-window" id="chatWindow">
                <div class="chat-header">
                    <span>ü§ñ AI –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç</span>
                    <button class="close-btn" id="closeChatBtn">√ó</button>
                </div>
                <div class="chat-messages" id="chatMessages">
                    <!-- –°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –∑–¥–µ—Å—å -->
                </div>
                <div class="chat-input-area">
                    <input type="text" class="chat-input" id="chatInput" placeholder="–°–ø—Ä–æ—Å–∏—Ç–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö..." maxlength="200">
                    <button class="chat-send" id="chatSend">‚û§</button>
                </div>
            </div>
            <button class="chat-toggle" id="chatToggle">üí¨</button>
        `;
        document.body.appendChild(widget);
    }

    attachEventListeners() {
        const toggle = document.getElementById('chatToggle');
        const closeBtn = document.getElementById('closeChatBtn');
        const sendBtn = document.getElementById('chatSend');
        const input = document.getElementById('chatInput');

        toggle.addEventListener('click', () => this.toggleChat());
        closeBtn.addEventListener('click', () => this.closeChat());
        sendBtn.addEventListener('click', () => this.sendMessage());
        
        input.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                this.sendMessage();
            }
        });
    }

    toggleChat() {
        const window = document.getElementById('chatWindow');
        const toggle = document.getElementById('chatToggle');
        
        if (this.isOpen) {
            this.closeChat();
        } else {
            window.style.display = 'flex';
            toggle.innerHTML = '√ó';
            this.isOpen = true;
            setTimeout(() => document.getElementById('chatInput').focus(), 300);
        }
    }

    closeChat() {
        const window = document.getElementById('chatWindow');
        const toggle = document.getElementById('chatToggle');
        
        window.style.display = 'none';
        toggle.innerHTML = 'üí¨';
        this.isOpen = false;
    }

    addWelcomeMessage() {
        setTimeout(() => {
            this.addBotMessage('–ü—Ä–∏–≤—ñ—Ç! –Ø AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç SmartShop üì±\n–î–æ–ø–æ–º–æ–∂—É –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ —Å–º–∞—Ä—Ç—Ñ–æ–Ω. –Ø–∫–∏–º –±—é–¥–∂–µ—Ç–æ–º –≤–æ–ª–æ–¥—ñ—î—Ç–µ?');
        }, 1000);
    }

    addUserMessage(text) {
        const messages = document.getElementById('chatMessages');
        const message = document.createElement('div');
        message.className = 'message user';
        message.innerHTML = `<div class="message-content">${this.escapeHtml(text)}</div>`;
        messages.appendChild(message);
        messages.scrollTop = messages.scrollHeight;
    }

    addBotMessage(text) {
        const messages = document.getElementById('chatMessages');
        const message = document.createElement('div');
        message.className = 'message bot';
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Å—ã–ª–∫–∏ –≤ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ
        const formattedText = this.formatMessage(text);
        message.innerHTML = `<div class="message-content">${formattedText}</div>`;
        messages.appendChild(message);
        messages.scrollTop = messages.scrollHeight;
    }

    formatMessage(text) {
        // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML
        let formatted = this.escapeHtml(text);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã
        formatted = formatted.replace(
            /(https?:\/\/[^\s]+\/product\/\d+)/g,
            '<a href="$1" target="_blank" style="color: #007bff; text-decoration: underline;">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä</a>'
        );
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        formatted = formatted.replace(/\n/g, '<br>');
        
        return formatted;
    }

    showTyping() {
        if (this.isTyping) return;
        
        const messages = document.getElementById('chatMessages');
        const typing = document.createElement('div');
        typing.className = 'message bot';
        typing.id = 'typingIndicator';
        typing.innerHTML = `
            <div class="typing-indicator">
                <div class="typing-dots">
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
            </div>
        `;
        messages.appendChild(typing);
        messages.scrollTop = messages.scrollHeight;
        this.isTyping = true;
    }

    hideTyping() {
        const typing = document.getElementById('typingIndicator');
        if (typing) {
            typing.remove();
            this.isTyping = false;
        }
    }

    async sendMessage() {
        const input = document.getElementById('chatInput');
        const sendBtn = document.getElementById('chatSend');
        const message = input.value.trim();
        
        if (!message || this.isTyping) return;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.addUserMessage(message);
        input.value = '';
        sendBtn.disabled = true;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
        this.showTyping();
        
        try {
            const response = await fetch('/api/chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ message: message })
            });
            
            const data = await response.json();
            
            this.hideTyping();
            
            if (response.ok && data.message) {
                this.addBotMessage(data.message);
            } else if (data.error) {
                this.addBotMessage(`‚ö†Ô∏è ${data.error}`);
            } else {
                this.addBotMessage('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —á–∞—Ç–∞:', error);
            this.hideTyping();
            this.addBotMessage('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
        
        sendBtn.disabled = false;
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç-–≤–∏–¥–∂–µ—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', function() {
    new ChatWidget();
});